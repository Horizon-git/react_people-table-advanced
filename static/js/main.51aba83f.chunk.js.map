{"version":3,"sources":["App.tsx","components/ErrorPage/ErrorPage.tsx","components/HomePage/HomePage.tsx","api.ts","types/Sort.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","components/PeopleFilters/PeopleFilters.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","ErrorPage","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","ok","json","Error","Sort","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","toggleCentury","century","includes","filter","letter","type","placeholder","onChange","event","target","handleQueryChange","map","length","PersonLink","person","pathname","slug","name","PeopleTable","people","selectedPerson","getSort","getOrder","handleSortClick","sortType","sort","order","getClassLink","born","died","motherName","mother","fatherName","father","PeoplePage","useState","setPeople","isLoading","setIsloading","isError","setIsError","useParams","useEffect","peopleFromServer","newPerson","find","getParents","catch","finally","preparedPeople","useMemo","sortedPeople","filteredPeople","normalizedQuery","toLocaleLowerCase","toLowerCase","Math","ceil","p1","p2","localeCompare","reverse","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.51aba83f.chunk.js","sourcesContent":["import './App.scss';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>Home</NavLink>\n          <NavLink to=\"/people\" className={getLinkClass}>People</NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const ErrorPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Error');\n    });\n}\n","export enum Sort {\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n  name = 'name',\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchLink } from '../SearchLink/SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuriesArr = ['16', '17', '18', '19', '20'];\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  }\n\n  function toggleCentury(century: string) {\n    const toggledCenturies = (centuries.includes(century)\n      ? centuries.filter(letter => letter !== century)\n      : [...centuries, century]\n    );\n\n    return {\n      centuries: toggledCenturies,\n    };\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(event) => handleQueryChange(event)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesArr.map((century) => (\n              <SearchLink\n                data-cy=\"century\"\n                key={+century}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={toggleCentury(century)}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"century\"\n              className={classNames('button', {\n                'is-success': !centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ centuries: null, sex: null, query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n  search: URLSearchParams;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, search }) => (\n  <Link\n    to={{ pathname: `/people/${person.slug}`, search: search.toString() }}\n    className={classNames({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person, Sort } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { SearchLink } from '../SearchLink/SearchLink';\n\ntype Props = {\n  people: Person[];\n  selectedPerson: Person | undefined;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedPerson }) => {\n  const [searchParams] = useSearchParams();\n  const getSort = searchParams.get('sort') || '';\n  const getOrder = searchParams.get('order') || '';\n\n  const handleSortClick = (sortType: string) => {\n    if (!getSort || sortType !== getSort) {\n      return { sort: sortType, order: null };\n    }\n\n    if (getSort && !getOrder && sortType === getSort) {\n      return { sort: sortType, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const getClassLink = (sortType: string) => {\n    return classNames('fas', {\n      'fa-sort': !getSort || getSort !== sortType,\n      'fa-sort-up': !getOrder && getSort === sortType,\n      'fa-sort-down': getOrder && getSort === sortType,\n    });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={handleSortClick(Sort.name)}>\n                <span className=\"icon\">\n                  <i className={getClassLink(Sort.name)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={handleSortClick(Sort.sex)}>\n                <span className=\"icon\">\n                  <i className={getClassLink(Sort.sex)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={handleSortClick(Sort.born)}>\n                <span className=\"icon\">\n                  <i className={getClassLink(Sort.born)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={handleSortClick(Sort.died)}>\n                <span className=\"icon\">\n                  <i className={getClassLink(Sort.died)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => {\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classNames({\n                'has-background-warning': selectedPerson?.slug === person.slug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} search={searchParams} />\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.motherName ? (\n                  <>\n                    {person.mother ? (\n                      <PersonLink\n                        person={person.mother}\n                        search={searchParams}\n                      />\n                    ) : (\n                      person.motherName\n                    )}\n                  </>\n                ) : (\n                  '-'\n                )}\n              </td>\n              <td>\n                {person.fatherName ? (\n                  <>\n                    {person.father ? (\n                      <PersonLink\n                        person={person.father}\n                        search={searchParams}\n                      />\n                    ) : (\n                      person.fatherName\n                    )}\n                  </>\n                ) : (\n                  '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person, Sort } from '../../types';\nimport { Loader } from '../Loader';\nimport { PeopleFilters } from '../PeopleFilters/PeopleFilters';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsloading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const { slug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const getSort = searchParams.get('sort') || '';\n  const getOrder = searchParams.get('order') || '';\n\n  function getParents(peopleFromServer: Person[]) {\n    const peopleWithParents = peopleFromServer.map((person) => {\n      const newPerson = { ...person };\n\n      newPerson.father = peopleFromServer.find(\n        (father) => father.name === newPerson.fatherName,\n      );\n\n      newPerson.mother = peopleFromServer.find(\n        (mother) => mother.name === newPerson.motherName,\n      );\n\n      return newPerson;\n    });\n\n    return peopleWithParents;\n  }\n\n  useEffect(() => {\n    setIsloading(true);\n    getPeople()\n      .then((peopleFromServer) => {\n        setPeople(getParents(peopleFromServer));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsloading(false));\n  }, []);\n\n  const preparedPeople: Person[] = useMemo(() => {\n    let filteredPeople = people;\n    const normalizedQuery = query.toLocaleLowerCase();\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter((person) => person.sex === sex);\n    }\n\n    if (normalizedQuery) {\n      filteredPeople = filteredPeople.filter(\n        (person) => person.name.toLowerCase().includes(normalizedQuery)\n          || person.motherName?.toLowerCase().includes(normalizedQuery)\n          || person.fatherName?.toLowerCase().includes(normalizedQuery),\n      );\n    }\n\n    if (centuries.length) {\n      filteredPeople = filteredPeople\n        .filter((person) => centuries\n          .find((century) => Math.ceil(person.born / 100) === +century));\n    }\n\n    let sortedPeople;\n\n    switch (getSort) {\n      case Sort.name:\n      case Sort.sex:\n        sortedPeople = [...filteredPeople]\n          .sort((p1, p2) => p1[getSort].localeCompare(p2[getSort]));\n        break;\n      case Sort.born:\n      case Sort.died:\n        sortedPeople = [...filteredPeople]\n          .sort((p1, p2) => p1[getSort] - p2[getSort]);\n        break;\n\n      default:\n        return filteredPeople;\n    }\n\n    if (getOrder) {\n      sortedPeople.reverse();\n    }\n\n    return sortedPeople || filteredPeople;\n  }, [searchParams, people]);\n\n  const selectedPerson = people.find((person) => person.slug === slug);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <div className=\"block\">\n            <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n              <div className=\"column is-7-tablet is-narrow-desktop\">\n                <PeopleFilters />\n              </div>\n\n              <div className=\"column\">\n                <div className=\"box table-container\">\n                  {isError ? (\n                    <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                      Something went wrong\n                    </p>\n                  ) : (\n                    <>\n                      {!people.length ? (\n                        <p data-cy=\"noPeopleMessage\">\n                          There are no people on the server\n                        </p>\n                      ) : (\n                        <>\n                          {preparedPeople.length ? (\n                            <PeopleTable\n                              people={preparedPeople}\n                              selectedPerson={selectedPerson}\n                            />\n                          ) : (\n                            <p>\n                              There are no people matching the current search\n                              criteria\n                            </p>\n                          )}\n                        </>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n","import {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { ErrorPage } from './components/ErrorPage/ErrorPage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n      </Route>\n      <Route path=\"*\" element={<ErrorPage />} />\n    </Routes>\n\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}